# 创建虚拟环境
# cmder 下
C:\Users\admin
λ mkvirtualenv --python=C:\Users\admin\AppData\Local\Programs\Python\Python36\python.exe lcv_s earch

# 安装 django
C:\Users\admin
λ pip install -i https://pypi.douban.com/simple/ django==1.11

# eclipse 下新建 django 工程    pydev django project
# 可以通过设置interpreter选择虚拟环境
# 工程名为 LcvSearch
# 新建app ，名为 search    #右键工程目录--> Django--> create application

# 在 LcvSearch\src\LcvSearch\settings.py 下添加新建的app
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'search',  #添加自己新建的app
]

# 尝试run
# 右键工程目录--> run as-->pydev django

# 打开chrome  http://127.0.0.1:8000/



# 在工程目录下新建文件夹 static ，用来存放django的静态文件（css，img，js等）

# 将 css，img，js 拷贝到 LcvSearch\src\static 下

# 在工程目录下新建文件夹 templates ，用来存放html文件

#  将 html 拷贝到 LcvSearch\src\templates 下



# 在 LcvSearch\src\LcvSearch\urls.py 下配置
"""LcvSearch URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/1.11/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.conf.urls import url, include
    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))
"""
from django.conf.urls import url
from django.contrib import admin
from django.views.generic import TemplateView
from search.views import SearchSuggest


urlpatterns = [
    url(r'^admin/', admin.site.urls),
    url(r'^$', TemplateView.as_view(), name="index"),

    url(r'^suggest/$', SearchSuggest.as_view(), name="suggest"),  #处理搜索建议  #在\LcvSearch\src\search\views.py 内处理

]





# 在 LcvSearch\src\LcvSearch\settings.py 下配置
"""
Django settings for LcvSearch project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  # 工程目录


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(s9zfqr00xza2!2gr#vykyv6mw8dfg*9=-7s_s9a+4$$$kna=_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'search',  #添加自己新建的app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LcvSearch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]  # 添加templates的路径
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LcvSearch.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [  # 配置 static 的路径    #是一个list可以添加多个路径
    os.path.join(BASE_DIR, "static")
]




# 在LcvSearch\src\templates\index.html 下配置 static的路径
{% load staticfiles %}
<link href="{% static 'css/style.css' %}" rel="stylesheet" type="text/css" />
<link href="{% static 'css/index.css' %}" rel="stylesheet" type="text/css" />

<script type="text/javascript" src="{% static 'js/jquery.js' %}"></script>
<script type="text/javascript" src="{% static 'js/global.js' %}"></script>

var suggest_url = "{% url "suggest" %}"



# LcvSearch\src\search\views.py
import json
from django.shortcuts import render
from django.views.generic.base import View
from search.models import ArticleType
from django.http import HttpResponse


# Create your views here.
class SearchSuggest(View):  #处理搜索建议
    def get(self, request):
        key_words = request.GET.get('s','')  #输入的是s  #默认值为空''
        re_datas = []
        if key_words:
            s = ArticleType.search()
            s = s.suggest('my_suggest', key_words, completion={  #与es中格式类似
                "field":"suggest", "fuzzy":{
                    "fuzziness":2
                },
                "size": 10  #返回10个
            })
            suggestions = s.execute_suggest()  #返回一个{}
            for match in suggestions.my_suggest[0].options:
                source = match._source
                re_datas.append(source["title"])  #取title
        return HttpResponse(json.dumps(re_datas), content_type="application/json")  #将数据返回给前端




# \LcvSearch\src\search\models.py

# -*- coding: utf-8 -*-
from django.db import models

from datetime import datetime
from elasticsearch_dsl import DocType, Date, Nested, Boolean, \
    analyzer, InnerDoc, Completion, Keyword, Text, Integer

from elasticsearch_dsl.analysis import CustomAnalyzer as _CustomAnalyzer

from elasticsearch_dsl.connections import connections  #连接
connections.create_connection(hosts=["localhost"])  #连接

# Create your models here.

class CustomAnalyzer(_CustomAnalyzer):  #继承自CustomAnalyzer #什么都不做，只是为了防止报错
    def get_analysis_definition(self):
        return {}


ik_analyzer = CustomAnalyzer("ik_max_word", filter=["lowercase"])
#                           #指定analyzer           #做大小写转换

class ArticleType(DocType):
    #伯乐在线文章类型
    suggest = Completion(analyzer=ik_analyzer)  # 指定suggest为Completion type，完成自动补全功能  # analyzer="ik_max_word"    
    title = Text(analyzer="ik_max_word")  #与es中的type相对应  #设置分析器
    create_date = Date()
    url = Keyword()
    url_object_id = Keyword()
    front_image_url = Keyword()
    front_image_path = Keyword()
    praise_nums = Integer()
    comment_nums = Integer()
    fav_nums = Integer()
    tags = Text(analyzer="ik_max_word")
    content = Text(analyzer="ik_max_word")

    class Meta:
        index = "jobbole"      #index
        doc_type = "article"   #type

if __name__ == "__main__":
    ArticleType.init()  #根据我们定义的类直接生成mapping




# es 的fuzzy 模糊搜素
GET  jobbole/_search
{
  "query": {
    "fuzzy": {"title": "linux"}  
  },  #  要搜索的字段:  搜索词
  "_source": ["title"]  #只显示title
}

GET  jobbole/_search
{
  "query": {
    "fuzzy": {
      "title": {
        "value": "linux",
        "fuzziness": 2,  #最小编辑距离
        "prefix_length": 0  #前面不参与变化的字的长度
      }
    }
  },
  "_source": ["title"]
}

# 编辑距离
编辑距离是一种字符串之间相似程度的计算方法。
即两个字符串之间的编辑距离等于使一个字符串变成另外一个字符串而进行的
(1)插入(2 )删除(3)替换或(4)相邻字符交换位置而进行操作的最少次数。
比如: ed("recc ginze","recc gnize")==1(需要 交换两个相邻字符“i”和"n"的位置)



# 自动补全  #搜索建议
POST jobbole/_search?pretty
{
  "suggest": {
    "my-suggest": {
      "text": "linux",
      "completion": {
        "field": "suggest",
        "fuzzy": {
          "fuzziness": 2
        }
      }
    }
  },
  "_source": "title"
}


